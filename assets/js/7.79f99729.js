(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{367:function(e,t,a){e.exports=a.p+"assets/img/GitHub_Webhooks.3cdaed97.png"},368:function(e,t,a){e.exports=a.p+"assets/img/GitHub_Webhooks-Details.da577fc5.png"},385:function(e,t,a){"use strict";a.r(t);var s=a(19),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"automated-deployment-with-tekton"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#automated-deployment-with-tekton"}},[e._v("#")]),e._v(" Automated deployment with Tekton")]),e._v(" "),s("p",[e._v("Take a real example "),s("a",{attrs:{href:"https://github.com/stefanprodan/podinfo",target:"_blank",rel:"noopener noreferrer"}},[e._v("Podinfo"),s("OutboundLink")],1),e._v("\napplication and create full pipeline for it...")]),e._v(" "),s("h2",{attrs:{id:"fork-podinfo-application"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fork-podinfo-application"}},[e._v("#")]),e._v(" Fork podinfo application")]),e._v(" "),s("p",[e._v("Fork the "),s("a",{attrs:{href:"https://github.com/stefanprodan/podinfo",target:"_blank",rel:"noopener noreferrer"}},[e._v("Podinfo"),s("OutboundLink")],1),e._v(" repository\n"),s("code",[e._v("podinfo")]),e._v(":")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" tmp\nhub clone "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"stefanprodan/podinfo"')]),e._v("\nhub -C "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"podinfo"')]),e._v(" fork\n")])])]),s("p",[e._v("Output:")]),e._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Cloning into 'podinfo'...\nremote: Enumerating objects: 10, done.\nremote: Counting objects: 100% (10/10), done.\nremote: Compressing objects: 100% (10/10), done.\nremote: Total 5266 (delta 0), reused 3 (delta 0), pack-reused 5256\nReceiving objects: 100% (5266/5266), 9.52 MiB | 1.93 MiB/s, done.\nResolving deltas: 100% (2342/2342), done.\nUpdating ruzickap\nFrom https://github.com/stefanprodan/podinfo\n * [new branch]      gh-pages   -> ruzickap/gh-pages\n * [new branch]      master     -> ruzickap/master\n * [new branch]      v0.x       -> ruzickap/v0.x\n * [new branch]      v1.x       -> ruzickap/v1.x\n * [new branch]      v3.x       -> ruzickap/v3.x\nnew remote: ruzickap\n")])])]),s("h2",{attrs:{id:"create-tekton-triggers-configuration"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#create-tekton-triggers-configuration"}},[e._v("#")]),e._v(" Create Tekton Triggers configuration")]),e._v(" "),s("p",[e._v("Create new namespace:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("kubectl create namespace getting-started\n")])])]),s("p",[e._v("Create the admin user, role and rolebinding:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("EOF"),s("span",{pre:!0,attrs:{class:"token bash punctuation"}},[e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" kubectl apply -f -")]),e._v('\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: tekton-triggers-admin\n  namespace: getting-started\nrules:\n- apiGroups:\n  - tekton.dev\n  resources:\n  - eventlisteners\n  - triggerbindings\n  - triggertemplates\n  - pipelineresources\n  verbs:\n  - get\n- apiGroups:\n  - tekton.dev\n  resources:\n  - pipelineruns\n  - pipelineresources\n  verbs:\n  - create\n- apiGroups:\n  - ""\n  resources:\n  - configmaps\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - apps\n  resources:\n  - deployments\n  verbs:\n  - get\n  - list\n  - watch\n  - create\n  - patch\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: tekton-triggers-admin\n  namespace: getting-started\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: tekton-triggers-admin-binding\n  namespace: getting-started\nsubjects:\n  - kind: ServiceAccount\n    name: tekton-triggers-admin\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: tekton-triggers-admin\nEOF')]),e._v("\n")])])]),s("p",[e._v("Create the "),s("code",[e._v("create-webhook")]),e._v(" user, role and rolebinding:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("EOF"),s("span",{pre:!0,attrs:{class:"token bash punctuation"}},[e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" kubectl apply -f -")]),e._v('\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: tekton-triggers-createwebhook\n  namespace: getting-started\nrules:\n- apiGroups:\n  - ""\n  resources:\n  - secrets\n  verbs:\n  - get\n  - list\n  - create\n  - update\n  - delete\n- apiGroups:\n  - tekton.dev\n  resources:\n  - eventlisteners\n  verbs:\n  - get\n  - list\n  - create\n  - update\n  - delete\n- apiGroups:\n  - networking.istio.io\n  resources:\n  - virtualservices\n  - gateways\n  verbs:\n  - create\n  - get\n  - list\n  - delete\n  - update\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: tekton-triggers-createwebhook\n  namespace: getting-started\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: tekton-triggers-createwebhook\n  namespace: getting-started\nsubjects:\n  - kind: ServiceAccount\n    name: tekton-triggers-createwebhook\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: tekton-triggers-createwebhook\nEOF')]),e._v("\n")])])]),s("p",[e._v("Create secret for Harbor registry to let Tekton pipeline to upload the container\nimage:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("kubectl create secret docker-registry -n getting-started harbor-docker-config "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --docker-server"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${CONTAINER_REGISTRY_SERVER}")]),e._v('"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --docker-username"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${CONTAINER_REGISTRY_USERNAME}")]),e._v('"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --docker-password"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${CONTAINER_REGISTRY_PASSWORD}")]),e._v('"')]),e._v("\n")])])]),s("p",[e._v("Install the Pipeline:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("EOF "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" kubectl apply -f -\napiVersion: tekton.dev/v1alpha1\nkind: Task\nmetadata:\n  name: build-docker-image-from-git-task\n  namespace: getting-started\nspec:\n  inputs:\n    resources:\n      - name: docker-source\n        type: "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v("\n    params:\n      - name: pathToDockerFile\n        description: The path to the dockerfile to build\n        default: /workspace/docker-source/Dockerfile\n      - name: pathToContext\n        description:\n          The build context used by Kaniko\n          "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("https://github.com/GoogleContainerTools/kaniko"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#kaniko-build-contexts)")]),e._v("\n        default: /workspace/docker-source\n  outputs:\n    resources:\n      - name: image-source\n        type: image\n  volumes:\n    - name: docker-config\n      secret:\n        secretName: harbor-docker-config\n        items:\n          - key: .dockerconfigjson\n            path: config.json\n    - name: shared-storage\n      emptyDir: "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n  steps:\n    - name: build\n      image: gcr.io/kaniko-project/executor\n      env:\n        - name: "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"DOCKER_CONFIG"')]),e._v("\n          value: "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/builder/home/.docker/"')]),e._v("\n      command:\n        - /kaniko/executor\n      args:\n        - --dockerfile"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("inputs.params.pathToDockerFile"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n        - --destination"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("outputs.resources.image-source.url"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n        - --context"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("inputs.params.pathToContext"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n        - --skip-tls-verify\n      volumeMounts:\n        - name: docker-config\n          mountPath: /builder/home/.docker/\n---\napiVersion: tekton.dev/v1alpha1\nkind: Task\nmetadata:\n  name: deploy-locally\n  namespace: getting-started\nspec:\n  inputs:\n    resources:\n      - name: image-source\n        type: image\n  outputs:\n    resources:\n    - name: event-to-sink\n      type: cloudEvent\n  steps:\n    - name: run-kubectl\n      image: lachlanevenson/k8s-kubectl:latest\n      command:\n      - "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sh")]),e._v("\n      args:\n      - -ce\n      - "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" -ex\n        kubectl run podinfo --image "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("inputs.resources.image-source.url"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v(" -o yaml --dry-run "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" kubectl apply -f -\n---\napiVersion: tekton.dev/v1alpha1\nkind: Pipeline\nmetadata:\n  name: getting-started-pipeline\n  namespace: getting-started\nspec:\n  resources:\n  - name: docker-source\n    type: "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v("\n  - name: image-source\n    type: image\n  - name: event-to-sink\n    type: cloudEvent\n  tasks:\n    - name: build-docker-image-from-git-task-run\n      taskRef:\n        name: build-docker-image-from-git-task\n      params:\n      - name: pathToDockerFile\n        value: Dockerfile\n      - name: pathToContext\n        value: /workspace/docker-source/\n      resources:\n        inputs:\n        - name: docker-source\n          resource: docker-source\n        outputs:\n        - name: image-source\n          resource: image-source\n    - name: deploy-locally\n      taskRef:\n        name: deploy-locally\n      resources:\n        inputs:\n          - name: image-source\n            resource: image-source\n            from:\n              - build-docker-image-from-git-task-run\n        outputs:\n          - name: event-to-sink\n            resource: event-to-sink\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: event-display\n  namespace: getting-started\n  labels:\n    app: event-display\nspec:\n  type: ClusterIP\n  ports:\n    - name: listener\n      port: "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("8080")]),e._v("\n      protocol: TCP\n  selector:\n    app: event-display\n---\n  apiVersion: v1\n  kind: Pod\n  metadata:\n    name: event-display\n    namespace: getting-started\n    labels:\n      name: event-display\n  spec:\n    hostname: event-display\n    containers:\n    - image: gcr.io/knative-releases/github.com/knative/eventing-sources/cmd/event_display\n      name: web\nEOF\n")])])]),s("p",[e._v("Install the TriggerTemplate, TriggerBinding and EventListener:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("EOF"),s("span",{pre:!0,attrs:{class:"token bash punctuation"}},[e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" kubectl apply -f -")]),e._v("\napiVersion: tekton.dev/v1alpha1\nkind: TriggerTemplate\nmetadata:\n  name: getting-started-triggertemplate\n  namespace: getting-started\nspec:\n  params:\n    - name: gitrevision\n      description: The git revision\n      default: master\n    - name: gitrepositoryurl\n      description: The git repository url\n    - name: image_registry_url\n      description: The container registry url\n    - name: namespace\n      description: The namespace to create the resources\n  resourcetemplates:\n    - apiVersion: tekton.dev/v1alpha1\n      kind: PipelineResource\n      metadata:\n        name: source-repo-\\"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("uid"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n        namespace: \\"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("params.namespace"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n      spec:\n        type: git\n        params:\n        - name: revision\n          value: \\"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("params.gitrevision"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n        - name: url\n          value: \\"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("params.gitrepositoryurl"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n    - apiVersion: tekton.dev/v1alpha1\n      kind: PipelineResource\n      metadata:\n        name: image-source-\\"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("uid"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n        namespace: \\"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("params.namespace"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n      spec:\n        type: image\n        params:\n          - name: url\n            value: \\"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("params.image_registry_url"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n    - apiVersion: tekton.dev/v1alpha1\n      kind: PipelineResource\n      metadata:\n        name: event-to-sink-\\"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("uid"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n        namespace: \\"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("params.namespace"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n      spec:\n        type: cloudEvent\n        params:\n          - name: targetURI\n            value: http://event-display.getting-started.svc.cluster.local\n    - apiVersion: tekton.dev/v1alpha1\n      kind: PipelineRun\n      metadata:\n        name: getting-started-pipeline-run-\\"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("uid"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n        namespace: \\"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("params.namespace"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n      spec:\n        serviceAccount: tekton-triggers-admin\n        pipelineRef:\n          name: getting-started-pipeline\n        resources:\n          - name: docker-source\n            resourceRef:\n              name: source-repo-\\"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("uid"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n          - name: image-source\n            resourceRef:\n              name: image-source-\\"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("uid"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n          - name: event-to-sink\n            resourceRef:\n              name: event-to-sink-\\"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("uid"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n---\napiVersion: tekton.dev/v1alpha1\nkind: TriggerBinding\nmetadata:\n  name: getting-started-pipelinebinding\n  namespace: getting-started\nspec:\n  params:\n    - name: gitrevision\n      value: \\"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("body.head_commit.id"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v('\n    - name: namespace\n      value: getting-started\n    - name: gitrepositoryurl\n      value: "https://github.com/\\'),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("body.repository.full_name"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v('"\n    - name: image_registry_url\n      value: "harbor.'),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${MY_DOMAIN}")]),e._v("/library/\\"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("body.repository.name"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v('"\n---\napiVersion: tekton.dev/v1alpha1\nkind: EventListener\nmetadata:\n  name: getting-started-listener\n  namespace: getting-started\nspec:\n  serviceAccountName: tekton-triggers-admin\n  triggers:\n    - binding:\n        name: getting-started-pipelinebinding\n      template:\n        name: getting-started-triggertemplate\nEOF')]),e._v("\n")])])]),s("h3",{attrs:{id:"configure-webhook"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#configure-webhook"}},[e._v("#")]),e._v(" Configure webhook")]),e._v(" "),s("p",[e._v("Create Task which will create Istio Gateway and VirtualService to handle\nincoming webhook form GitHub:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("EOF2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" kubectl apply -f -\napiVersion: tekton.dev/v1alpha1\nkind: Task\nmetadata:\n  name: create-istio-gateway-virtualservice\n  namespace: getting-started\nspec:\n  volumes:\n  - name: work\n    emptyDir: "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n  inputs:\n    params:\n    - name: TLScredentialName\n      description: "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Specify the secret with wildcard certificate"')]),e._v("\n    - name: ExternalDomain\n      description: "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"The external domain for the EventListener"')]),e._v("\n    - name: Service\n      description: "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"The name of the Service used in the VirtualService"')]),e._v("\n    - name: ServicePort\n      description: "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"The service port that the VirtualService is being created on"')]),e._v("\n\n  steps:\n  - name: create-istio-gateway-virtualservice\n    image: lachlanevenson/k8s-kubectl:latest\n    command:\n    - "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sh")]),e._v("\n    args:\n    - -ce\n    - "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" -ex\n      "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("EOF"),s("span",{pre:!0,attrs:{class:"token bash punctuation"}},[e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" kubectl create -f -")]),e._v("\n      apiVersion: networking.istio.io/v1alpha3\n      kind: Gateway\n      metadata:\n        name: "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("inputs.params.Service"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("-gateway\n      spec:\n        selector:\n          istio: ingressgateway\n        servers:\n        - port:\n            number: 443\n            name: https-"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("inputs.params.Service"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n            protocol: HTTPS\n          hosts:\n          - "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("inputs.params.ExternalDomain"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n          tls:\n            credentialName: "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("inputs.params.TLScredentialName"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n            mode: SIMPLE\n            privateKey: sds\n            serverCertificate: sds\n      ---\n      apiVersion: networking.istio.io/v1alpha3\n      kind: VirtualService\n      metadata:\n        name: "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("inputs.params.Service"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("-virtual-service\n      spec:\n        hosts:\n        - "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("inputs.params.ExternalDomain"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n        gateways:\n        - "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("inputs.params.Service"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("-gateway\n        http:\n        - route:\n          - destination:\n              host: "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("inputs.params.Service"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n              port:\n                number: "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("inputs.params.ServicePort"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n      EOF\nEOF")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v("\n")])])]),s("p",[e._v("Create TaskRun to start "),s("code",[e._v("create-istio-gateway-virtualservice")]),e._v(" Task:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("EOF"),s("span",{pre:!0,attrs:{class:"token bash punctuation"}},[e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" kubectl apply -f -")]),e._v("\napiVersion: tekton.dev/v1alpha1\nkind: TaskRun\nmetadata:\n  name: create-istio-gateway-virtualservice-run\n  namespace: getting-started\nspec:\n  taskRef:\n    name: create-istio-gateway-virtualservice\n  inputs:\n    params:\n    - name: TLScredentialName\n      value: ingress-cert-"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${LETSENCRYPT_ENVIRONMENT}")]),e._v("\n    - name: ExternalDomain\n      value: getting-started."),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${MY_DOMAIN}")]),e._v('\n    - name: Service\n      value: el-getting-started-listener\n    - name: ServicePort\n      value: "8080"\n  timeout: 1000s\n  serviceAccount: tekton-triggers-createwebhook\nEOF')]),e._v("\n")])])]),s("p",[e._v("Create webhook Task:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("EOF "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" kubectl apply -f -\napiVersion: tekton.dev/v1alpha1\nkind: Task\nmetadata:\n  name: create-webhook\n  namespace: getting-started\nspec:\n  volumes:\n  - name: github-secret\n    secret:\n      secretName: "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("inputs.params.GitHubSecretName"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n\n  inputs:\n    params:\n    - name: ExternalDomain\n      description: "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"The external domain for the EventListener e.g. '),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("inputs.params.EventListenerName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("."),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("PROXYIP"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(".nip.io"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),e._v('"')]),e._v("\n    - name: GitHubUser\n      description: "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"The GitHub user"')]),e._v("\n    - name: GitHubRepo\n      description: "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"The GitHub repo where the webhook will be created"')]),e._v("\n    - name: GitHubOrg\n      description: "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"The GitHub organization where the webhook will be created"')]),e._v("\n    - name: GitHubSecretName\n      description: "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"The Secret name for GitHub access token. This is always mounted and must exist"')]),e._v("\n    - name: GitHubAccessTokenKey\n      description: "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"The GitHub access token key name"')]),e._v("\n    - name: GitHubSecretStringKey\n      description: "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"The GitHub secret string key name"')]),e._v("\n    - name: GitHubDomain\n      description: "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"The GitHub domain. Override for GitHub Enterprise"')]),e._v("\n      default: "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"github.com"')]),e._v("\n    - name: WebhookEvents\n      description: "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"List of events the webhook will send notifications for"')]),e._v("\n      default: "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"['),s("span",{pre:!0,attrs:{class:"token entity",title:"\\\\"}},[e._v("\\\\")]),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v("push"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\\\"}},[e._v("\\\\")]),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v(","),s("span",{pre:!0,attrs:{class:"token entity",title:"\\\\"}},[e._v("\\\\")]),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v("pull_request"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\\\"}},[e._v("\\\\")]),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v(']"')]),e._v("\n\n  steps:\n  - name: create-webhook\n    image: pstauffer/curl:latest\n    volumeMounts:\n    - name: github-secret\n      mountPath: /var/secret\n    command:\n    - "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sh")]),e._v("\n    args:\n    - -ce\n    - "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" -e\n      "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Create Webhook"')]),e._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("inputs.params.GitHubDomain"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"github.com"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("then")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" -v -d "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"{'),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v("name"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v(": "),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v("web"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v(","),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v("active"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v(": true,"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v("events"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v(": "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("inputs.params.WebhookEvents"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v(","),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v("config"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v(": {"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v("url"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v(": "),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v("https://"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("inputs.params.ExternalDomain"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v(","),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v("content_type"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v(": "),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v("json"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v(","),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v("insecure_ssl"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v(": "),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v("1"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v(" ,"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v("secret"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v(": "),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" /var/secret/"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("$(")]),e._v("inputs.params.GitHubSecretStringKey"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v('}}"')]),e._v(" -X POST -u "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("inputs.params.GitHubUser"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" /var/secret/"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("$(")]),e._v("inputs.params.GitHubAccessTokenKey"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v(" -L https://api.github.com/repos/"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("inputs.params.GitHubOrg"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("/"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("inputs.params.GitHubRepo"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("/hooks\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("else")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" -d "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"{'),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v("name"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v(": "),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v("web"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v(","),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v("active"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v(": true,"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v("events"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v(": "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("inputs.params.WebhookEvents"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v(","),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v("config"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v(": {"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v("url"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v(": "),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v("https://"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("inputs.params.ExternalDomain"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("/"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v(","),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v("content_type"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v(": "),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v("json"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v(","),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v("insecure_ssl"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v(": "),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v("1"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v(" ,"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v("secret"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v(": "),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" /var/secret/"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("$(")]),e._v("inputs.params.GitHubSecretStringKey"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v('}}"')]),e._v(" -X POST -u "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("inputs.params.GitHubUser"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" /var/secret/"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("$(")]),e._v("inputs.params.GitHubAccessTokenKey"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v(" -L https://"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("inputs.params.GitHubDomain"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("/api/v3/repos/"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("inputs.params.GitHubOrg"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("/"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("inputs.params.GitHubRepo"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("/hooks\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("fi")]),e._v("\nEOF\n")])])]),s("p",[e._v("Create secret with "),s("a",{attrs:{href:"https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line#creating-a-token",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub Personal Access Token"),s("OutboundLink")],1),e._v(":")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("EOF"),s("span",{pre:!0,attrs:{class:"token bash punctuation"}},[e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" kubectl apply -f -")]),e._v("\napiVersion: v1\nkind: Secret\nmetadata:\n  name: webhook-secret\n  namespace: getting-started\nstringData:\n  token: "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${GITHUB_TOKEN}")]),e._v("\n  secret: random-string-data\nEOF")]),e._v("\n")])])]),s("p",[e._v("Create TaskRun to initiate Webhook:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sleep")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("20")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Wait for DNS created by previous TaskRun")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("EOF"),s("span",{pre:!0,attrs:{class:"token bash punctuation"}},[e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" kubectl apply -f -")]),e._v('\napiVersion: tekton.dev/v1alpha1\nkind: TaskRun\nmetadata:\n  name: create-webhook-run\n  namespace: getting-started\nspec:\n  taskRef:\n    name: create-webhook\n  inputs:\n    params:\n    - name: GitHubOrg\n      value: "ruzickap"\n    - name: GitHubUser\n      value: "ruzickap"\n    - name: GitHubRepo\n      value: "podinfo"\n    - name: GitHubSecretName\n      value: webhook-secret\n    - name: GitHubAccessTokenKey\n      value: token\n    - name: GitHubSecretStringKey\n      value: secret\n    - name: ExternalDomain\n      value: getting-started.'),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${MY_DOMAIN}")]),e._v("\n  timeout: 1000s\n  serviceAccount: tekton-triggers-createwebhook\nEOF")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sleep")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v("\n")])])]),s("p",[e._v("Verify if the TaskRuns were successfully executed:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("kubectl get taskruns.tekton.dev -n getting-started\n")])])]),s("p",[e._v("Output:")]),e._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("NAME                                      SUCCEEDED   REASON      STARTTIME   COMPLETIONTIME\ncreate-istio-gateway-virtualservice-run   True        Succeeded   80s         71s\ncreate-webhook-run                        Unknown     Pending     2s\n")])])]),s("p",[e._v("Look at the logs from "),s("code",[e._v("create-istio-gateway-virtualservice")]),e._v(" TaskRun:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("tkn taskrun logs -n getting-started create-istio-gateway-virtualservice-run\n")])])]),s("p",[e._v("Output:")]),e._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("[create-istio-gateway-virtualservice] + + kubectl create -f -\n[create-istio-gateway-virtualservice] cat\n[create-istio-gateway-virtualservice] gateway.networking.istio.io/el-getting-started-listener-gateway created\n[create-istio-gateway-virtualservice] virtualservice.networking.istio.io/el-getting-started-listener-virtual-service created\n")])])]),s("p",[e._v("Look at the logs from "),s("code",[e._v("create-webhook-run")]),e._v(" TaskRun:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("tkn taskrun logs -n getting-started create-webhook-run\n")])])]),s("p",[e._v("Output:")]),e._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('[create-webhook] Create Webhook\n[create-webhook] Note: Unnecessary use of -X or --request, POST is already inferred.\n[create-webhook]   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n[create-webhook]                                  Dload  Upload   Total   Spent    Left  Speed\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0*   Trying 140.82.118.6...\n[create-webhook] * TCP_NODELAY set\n[create-webhook] * Connected to api.github.com (140.82.118.6) port 443 (#0)\n[create-webhook] * ALPN, offering h2\n[create-webhook] * ALPN, offering http/1.1\n[create-webhook] * successfully set certificate verify locations:\n[create-webhook] *   CAfile: /etc/ssl/certs/ca-certificates.crt\n[create-webhook]   CApath: none\n[create-webhook] * TLSv1.2 (OUT), TLS handshake, Client hello (1):\n[create-webhook] } [232 bytes data]\n[create-webhook] * TLSv1.2 (IN), TLS handshake, Server hello (2):\n[create-webhook] { [108 bytes data]\n[create-webhook] * TLSv1.2 (IN), TLS handshake, Certificate (11):\n[create-webhook] { [2851 bytes data]\n[create-webhook] * TLSv1.2 (IN), TLS handshake, Server key exchange (12):\n[create-webhook] { [300 bytes data]\n[create-webhook] * TLSv1.2 (IN), TLS handshake, Server finished (14):\n[create-webhook] { [4 bytes data]\n[create-webhook] * TLSv1.2 (OUT), TLS handshake, Client key exchange (16):\n[create-webhook] } [37 bytes data]\n[create-webhook] * TLSv1.2 (OUT), TLS change cipher, Client hello (1):\n[create-webhook] } [1 bytes data]\n[create-webhook] * TLSv1.2 (OUT), TLS handshake, Finished (20):\n[create-webhook] } [16 bytes data]\n[create-webhook] * TLSv1.2 (IN), TLS change cipher, Client hello (1):\n[create-webhook] { [1 bytes data]\n[create-webhook] * TLSv1.2 (IN), TLS handshake, Finished (20):\n[create-webhook] { [16 bytes data]\n[create-webhook] * SSL connection using TLSv1.2 / ECDHE-RSA-AES128-GCM-SHA256\n[create-webhook] * ALPN, server accepted to use http/1.1\n[create-webhook] * Server certificate:\n[create-webhook] *  subject: C=US; ST=California; L=San Francisco; O=GitHub, Inc.; CN=*.github.com\n[create-webhook] *  start date: Jul  8 00:00:00 2019 GMT\n[create-webhook] *  expire date: Jul 16 12:00:00 2020 GMT\n[create-webhook] *  subjectAltName: host "api.github.com" matched cert\'s "*.github.com"\n[create-webhook] *  issuer: C=US; O=DigiCert Inc; OU=www.digicert.com; CN=DigiCert SHA2 High Assurance Server CA\n[create-webhook] *  SSL certificate verify ok.\n[create-webhook] * Server auth using Basic with user \'ruzickap\'\n[create-webhook] > POST /repos/ruzickap/podinfo/hooks HTTP/1.1\n[create-webhook] > Host: api.github.com\n[create-webhook] > Authorization: Basic cnxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxU3MA==\n[create-webhook] > User-Agent: curl/7.60.0\n[create-webhook] > Accept: */*\n[create-webhook] > Content-Length: 195\n[create-webhook] > Content-Type: application/x-www-form-urlencoded\n[create-webhook] >\n[create-webhook] } [195 bytes data]\n[create-webhook] * upload completely sent off: 195 out of 195 bytes\n[create-webhook] < HTTP/1.1 201 Created\n[create-webhook] < Date: Fri, 27 Dec 2019 10:19:37 GMT\n[create-webhook] < Content-Type: application/json; charset=utf-8\n[create-webhook] < Content-Length: 688\n[create-webhook] < Server: GitHub.com\n[create-webhook] < Status: 201 Created\n[create-webhook] < X-RateLimit-Limit: 5000\n[create-webhook] < X-RateLimit-Remaining: 4992\n[create-webhook] < X-RateLimit-Reset: 1577445296\n[create-webhook] < Cache-Control: private, max-age=60, s-maxage=60\n[create-webhook] < Vary: Accept, Authorization, Cookie, X-GitHub-OTP\n[create-webhook] < ETag: "a9xxxxxxxxxxxxxxxxxxxxxxxxxxxxe3"\n[create-webhook] < X-OAuth-Scopes: admin:org_hook, admin:repo_hook, delete_repo, read:org, repo, user:email\n[create-webhook] < X-Accepted-OAuth-Scopes: admin:repo_hook, public_repo, repo, write:repo_hook\n[create-webhook] < Location: https://api.github.com/repos/ruzickap/podinfo/hooks/170061618\n[create-webhook] < X-GitHub-Media-Type: github.v3; format=json\n[create-webhook] < Access-Control-Expose-Headers: ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type\n[create-webhook] < Access-Control-Allow-Origin: *\n[create-webhook] < Strict-Transport-Security: max-age=31536000; includeSubdomains; preload\n[create-webhook] < X-Frame-Options: deny\n[create-webhook] < X-Content-Type-Options: nosniff\n[create-webhook] < X-XSS-Protection: 1; mode=block\n[create-webhook] < Referrer-Policy: origin-when-cross-origin, strict-origin-when-cross-origin\n[create-webhook] < Content-Security-Policy: default-src \'none\'\n[create-webhook] < Vary: Accept-Encoding\n[create-webhook] < X-GitHub-Request-Id: CEXX:XXXXX:XXXXXXX:XXXXXXX:XXXXXXB9\n[create-webhook] <\n[create-webhook] { [688 bytes data]\n100   883  100   688  100   195   1746    494 --:--:-- --:--:-- --:--:--  2241\n[create-webhook] * Connection #0 to host api.github.com left intact\n[create-webhook] {\n[create-webhook]   "type": "Repository",\n[create-webhook]   "id": 170061618,\n[create-webhook]   "name": "web",\n[create-webhook]   "active": true,\n[create-webhook]   "events": [\n[create-webhook]     "pull_request",\n[create-webhook]     "push"\n[create-webhook]   ],\n[create-webhook]   "config": {\n[create-webhook]     "content_type": "json",\n[create-webhook]     "insecure_ssl": "1",\n[create-webhook]     "secret": "********",\n[create-webhook]     "url": "https://getting-started.mylabs.dev"\n[create-webhook]   },\n[create-webhook]   "updated_at": "2019-12-27T10:19:37Z",\n[create-webhook]   "created_at": "2019-12-27T10:19:37Z",\n[create-webhook]   "url": "https://api.github.com/repos/ruzickap/podinfo/hooks/170061618",\n[create-webhook]   "test_url": "https://api.github.com/repos/ruzickap/podinfo/hooks/170061618/test",\n[create-webhook]   "ping_url": "https://api.github.com/repos/ruzickap/podinfo/hooks/170061618/pings",\n[create-webhook]   "last_response": {\n[create-webhook]     "code": null,\n[create-webhook]     "status": "unused",\n[create-webhook]     "message": null\n[create-webhook]   }\n[create-webhook] }\n')])])]),s("p",[e._v("You should also see in the GitHub / Settings / Webhook the registration "),s("a",{attrs:{href:"https://github.com/ruzickap/podinfo/settings/hooks/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/ruzickap/podinfo/settings/hooks/"),s("OutboundLink")],1),e._v(":")]),e._v(" "),s("p",[s("img",{attrs:{src:a(367),alt:"GitHub Webhooks",title:"GitHub Webhooks"}})]),e._v(" "),s("p",[e._v("After clicking on the Webhook you can see the details:")]),e._v(" "),s("p",[s("img",{attrs:{src:a(368),alt:"GitHub Webhooks - Details",title:"GitHub Webhooks - Details"}})]),e._v(" "),s("p",[e._v("In case you are troubleshooting the incoming traffic from GitHub the look at\nthe logs of the pod. You should be able to see the details\nin the "),s("code",[e._v("kubectl logs")]),e._v(".")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("kubectl get pods -n getting-started -l "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("eventlistener")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("getting-started-listener\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sleep")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v("\n")])])]),s("p",[e._v("Output:")]),e._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("NAME                                          READY   STATUS    RESTARTS   AGE\nel-getting-started-listener-fcffc467d-xwsfp   1/1     Running   0          2m6s\n")])])]),s("h2",{attrs:{id:"change-the-source-code-of-the-app"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#change-the-source-code-of-the-app"}},[e._v("#")]),e._v(" Change the source code of the app")]),e._v(" "),s("p",[e._v("Trigger the pipeline by calling the:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Trigger build"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),e._v(" podinfo/README.md\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" -C podinfo commit -s -a -m "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Standard version"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" -C podinfo push ruzickap\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sleep")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("30")]),e._v("\nkubectl --timeout"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("10m -n getting-started "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("wait")]),e._v(" --for"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("condition"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("Succeeded pipelineruns --all\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sleep")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v("\n")])])]),s("p",[e._v("Output:")]),e._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("[master d4120e6] Standard version\n 1 file changed, 1 insertion(+), 1 deletion(-)\nWarning: Permanently added '[ssh.github.com]:443,[192.30.253.122]:443' (RSA) to the list of known hosts.\nEnumerating objects: 5, done.\nCounting objects: 100% (5/5), done.\nDelta compression using up to 4 threads\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 325 bytes | 162.00 KiB/s, done.\nTotal 3 (delta 2), reused 0 (delta 0)\nremote: Resolving deltas: 100% (2/2), completed with 2 local objects.\nTo github.com:ruzickap/podinfo.git\n   948de81..d4120e6  master -> master\npipelinerun.tekton.dev/getting-started-pipeline-run-fzrtg condition met\n")])])]),s("p",[e._v("Look at the logs of the newly deployed pod (look at "),s("code",[e._v('"Starting podinfo"')]),e._v("):")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("PODINFO_POD")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("kubectl get pods -n getting-started -l"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("run"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("podinfo -o "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("jsonpath")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"{.items[0].metadata.name}"')]),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\nkubectl -n getting-started logs -n getting-started "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${PODINFO_POD}")]),e._v("\n")])])]),s("p",[e._v("Output:")]),e._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"level"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"info"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"ts"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"2019-11-27T15:00:58.907Z"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"caller"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"podinfo/main.go:120"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"msg"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Starting podinfo"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"version"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"3.1.5"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"revision"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"164a27b33b09d1b50fad277a60a6c19d353cb9d8"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"port"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"9898"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),s("p",[e._v("Let's try to change the code of the application:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sed")]),e._v(" -i "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"s/Starting podinfo/Starting podinfo - new Tekton build version/"')]),e._v(" podinfo/cmd/podinfo/main.go\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" -C podinfo "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("diff")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" -C podinfo commit -s -a -m "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"String changed"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" -C podinfo push ruzickap\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sleep")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("20")]),e._v("\n")])])]),s("p",[e._v("Output:")]),e._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\nmodified: cmd/podinfo/main.go\n─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n@ cmd/podinfo/main.go:120 @ func main() {\n    }\n\n    // log version and port\n    logger.Info("Starting podinfo",\n    logger.Info("Starting podinfo - new Tekton build version",\n        zap.String("version", viper.GetString("version")),\n        zap.String("revision", viper.GetString("revision")),\n        zap.String("port", srvCfg.Port),\n[master 4d9f5bc] String changed\n 1 file changed, 1 insertion(+), 1 deletion(-)\nWarning: Permanently added \'[ssh.github.com]:443,[192.30.253.122]:443\' (RSA) to the list of known hosts.\nEnumerating objects: 9, done.\nCounting objects: 100% (9/9), done.\nDelta compression using up to 4 threads\nCompressing objects: 100% (4/4), done.\nWriting objects: 100% (5/5), 459 bytes | 459.00 KiB/s, done.\nTotal 5 (delta 2), reused 0 (delta 0)\nremote: Resolving deltas: 100% (2/2), completed with 2 local objects.\nTo github.com:ruzickap/podinfo.git\n   d4120e6..4d9f5bc  master -> master\n')])])]),s("p",[e._v("Wait for the pipelines to complete:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("kubectl --timeout"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("10m -n getting-started "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("wait")]),e._v(" --for"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("condition"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("Succeeded pipelineruns --all\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sleep")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v("\n")])])]),s("p",[e._v("Output:")]),e._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("pipelinerun.tekton.dev/getting-started-pipeline-run-dzqdl condition met\npipelinerun.tekton.dev/getting-started-pipeline-run-fzrtg condition met\n")])])]),s("p",[e._v('Check how the logs of the newly deployed podinfo logs should contain\n"Starting podinfo - new Tekton build version":')]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("PODINFO_POD")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("kubectl get pods -n getting-started -l"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("run"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("podinfo -o "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("jsonpath")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"{.items[0].metadata.name}"')]),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\nkubectl -n getting-started delete pod -n getting-started "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${PODINFO_POD}")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sleep")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("PODINFO_POD")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("kubectl get pods -n getting-started -l"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("run"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("podinfo -o "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("jsonpath")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"{.items[0].metadata.name}"')]),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\nkubectl -n getting-started logs -n getting-started "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${PODINFO_POD}")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v("\n")])])]),s("p",[e._v("Output:")]),e._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[e._v("pod "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"podinfo-6ccfb5f9b6-bwrbn"')]),e._v(" deleted\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"level"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"info"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"ts"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"2019-12-27T10:28:22.304Z"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"caller"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"podinfo/main.go:120"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"msg"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Starting podinfo - new Tekton build version"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"version"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"3.1.5"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"revision"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"4d9f5bc71bd9a8c7ae44a9cd9631e45067727a2e"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"port"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"9898"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);